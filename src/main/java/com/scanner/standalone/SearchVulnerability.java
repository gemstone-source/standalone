package com.scanner.standalone;

import io.restassured.path.json.JsonPath;
import io.restassured.path.json.exception.JsonPathException;
import org.apache.maven.artifact.versioning.ComparableVersion;
import java.io.File;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class SearchVulnerability{
    List<Results> results = new ArrayList<>();
    public List<Results> showFiles(File[] files,String app,String version3){
        for(File file : files){

            if(file.isDirectory()){
                // System.out.println("Directory : " + file.getAbsolutePath());
                showFiles(file.listFiles(),app,version3);
            } else {
                try {
                    JsonPath jsonPath = JsonPath.from(file.getAbsoluteFile());

                    // String name = jsonPath.getString("containers.cna.descriptions.find{it.product == '" + app +"' }");
                    String name = jsonPath.getString("containers.cna.descriptions[0].value");

                    if(name != null){
                        if (name.toLowerCase().contains(app.toLowerCase()) ) {
                            // Fetching version from Value
                            String splitt[] = name.split("[^0-9\\.]+");
                            //String digits [] = name.replaceAll("[^0-9]*(\\d+).*", "$1").split("");
                            // String[] versions = name.replaceAll("[^0-9\\.]+", "").split("\\.");
                            String version = "";

                            for (String split: splitt){
                                if (split.endsWith(".")) {
                                    split = split.substring(0, split.length() - 1); // remove the last character (which is a dot)
                                }
                                version += split;
                            }
                            ComparableVersion version1 = new ComparableVersion(version);
                            ComparableVersion version2 = new ComparableVersion(version3);

                            if (version1.equals(version2)){
                                Results result = new Results();

                                // Vulnerability Found Pane Results
                                result.setItem(app);
                                result.setInstallDate(String.valueOf(LocalDate.now()));
                                result.setSeverity(String.valueOf(version2));

                                // CVE Description(Rank) Pane
                                result.setCveid(jsonPath.getString("cveMetadata.cveId"));
                                result.setDescription(jsonPath.getString("containers.cna.descriptions[0].value"));

                                System.out.println("Product name : " + jsonPath.getString("containers.cna.affected.product"));
                                System.out.println("Product name : " + app);
                                System.out.println("Version : " + version2 );
                                System.out.println("Product cveID : " + jsonPath.getString("cveMetadata.cveId"));
                                System.out.println("Vulnerability : " + jsonPath.getString("containers.cna.descriptions[0].value"));
                                System.out.println("");

                                results.add(result);

                            }
                        }
                    }
                }
                catch (JsonPathException e) {
                    System.out.println("Failed to parse the JSON document. Error message: " + e.getMessage());
                    System.out.println();
                }
                catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return results;
    }
}
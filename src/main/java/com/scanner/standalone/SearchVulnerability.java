package com.scanner.standalone;

import io.restassured.path.json.JsonPath;
import io.restassured.path.json.exception.JsonPathException;
import org.apache.maven.artifact.versioning.ComparableVersion;

import java.io.File;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class SearchVulnerability {
    private List<Results> results = new ArrayList<>();

    public List<Results> showFiles(File[] files, String app, String version3) {
        JsonPath jsonPath = null;

        try {
            for (File file : files) {
                if (file.isDirectory()) {
                    showFiles(file.listFiles(), app, version3);
                } else {
                    jsonPath = JsonPath.from(file);

                    String name = jsonPath.getString("containers.cna.descriptions[0].value");

                    if (name != null && name.toLowerCase().contains(app.toLowerCase())) {
                        String version = getVersionFromName(name);

                        if (version != null) {
                            ComparableVersion version1 = new ComparableVersion(version);
                            ComparableVersion version2 = new ComparableVersion(version3);

                            if (version1.equals(version2)) {
                                Results result = new Results();

                                result.setItem(app);
                                result.setInstallDate(String.valueOf(LocalDate.now()));
                                result.setSeverity(String.valueOf(version2));

                                result.setCveid(jsonPath.getString("cveMetadata.cveId"));
                                result.setDescription(name);

                                System.out.println("Product name: " + jsonPath.getString("containers.cna.affected.product"));
                                System.out.println("Product name: " + app);
                                System.out.println("Version: " + version2);
                                System.out.println("Product cveID: " + jsonPath.getString("cveMetadata.cveId"));
                                System.out.println("Vulnerability: " + name);
                                System.out.println("");

                                synchronized (results) {
                                    results.add(result);
                                }
                            }
                        }
                    }
                }
            }
        } catch (JsonPathException e) {
            System.out.println("Failed to parse the JSON document. Error message: " + e.getMessage());
            System.out.println();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return results;
    }

    private String getVersionFromName(String name) {
        String[] splitt = name.split("[^0-9\\.]+");
        StringBuilder version = new StringBuilder();

        for (String split : splitt) {
            if (split.endsWith(".")) {
                split = split.substring(0, split.length() - 1);
            }
            version.append(split);
        }

        return version.toString();
    }
}
package com.scanner.standalone;

import io.restassured.path.json.JsonPath;
import io.restassured.path.json.exception.JsonPathException;
import org.apache.maven.artifact.versioning.ComparableVersion;
import java.io.File;

public class SearchVulnerability{
//    public static void main(String args[])  {
//        File dir = new File("C:\\Users\\hashghost\\Desktop\\4xxx");
//      // showFiles(dir.listFiles());
//    }
    public static void showFiles(File[] files,String app,String version3){
        for(File file : files){

            if(file.isDirectory()){
                // System.out.println("Directory : " + file.getAbsolutePath());
                showFiles(file.listFiles(),app,version3);
            } else {
                try {
                    JsonPath jsonPath = JsonPath.from(file.getAbsoluteFile());

                    // Variable of application to be fetched
                    //String app = "Chrome";

                    //   String name = jsonPath.getString("containers.cna.descriptions.find{it.product == '" + app +"' }");
                    String name = jsonPath.getString("containers.cna.descriptions[0].value");

                    if(name != null){
                    if (name.toLowerCase().contains(app.toLowerCase()) ) {
                        // Fetching version from Value
                        String splitt[] = name.split("[^0-9\\.]+");
                        //String digits [] = name.replaceAll("[^0-9]*(\\d+).*", "$1").split("");
                       // String[] versions = name.replaceAll("[^0-9\\.]+", "").split("\\.");
                        String version = "";

                        for (String split: splitt){
                            if (split.endsWith(".")) {
                                split = split.substring(0, split.length() - 1); // remove the last character (which is a dot)
                            }
                            version += split;
                        }
                        ComparableVersion version1 = new ComparableVersion(version);
                        ComparableVersion version2 = new ComparableVersion(version3);

                        if (version1.equals(version2)){
                            System.out.println("Product name : " + jsonPath.getString("containers.cna.affected.product"));
                            System.out.println("Product cveID : " + jsonPath.getString("cveMetadata.cveId"));
                            System.out.println("Vulnerability : " + jsonPath.getString("containers.cna.descriptions[0].value"));
                            System.out.println("Version : " + version2 );
                            System.out.println("");
                        }
                    }
                }
                }
                catch (JsonPathException e) {
                    System.out.println("Failed to parse the JSON document. Error message: " + e.getMessage());
                    System.out.println();
                }
                catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }
}